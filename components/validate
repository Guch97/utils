
const validatePassPhone = (rule, value, callback) => {
  // 手机号验证
  const re = /^1\d{10}$/
  // +86 手机
  const re1 = /^((\+86)|(86))?(13)\d{9}$/
  // 带区号
  const re2 = /^0\d{2,3}-?\d{7,8}$/
  // 不带区号
  const re3 = /^\d{7,8}$/
  console.log(re.test(value), 999)
  console.log(re1.test(value), 888)
  console.log(re2.test(value), 777)
  console.log(re3.test(value), 666)
  if (re.test(value) || re1.test(value) || re2.test(value) || re3.test(value)) {
    callback()
  } else {
    callback('联系电话格式错误')
  }
}

const validatePhone = (rule, value, callback) => {
  if (value.length < 1) {
    callback(new Error('请输入手机号'))
  } else {
    if (!(/^1[3456789]\d{9}$/.test(value))) {
      callback('手机号输入有误，请重填')
    }
    callback()
  }
}


ident: [{ required: true, trigger: 'blur', message: '请输入身份证号码' },
          {
            pattern: /(^[1-9]\d{5}(18|19|([23]\d))\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$)|(^[1-9]\d{5}\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{2}$)/,
            message: '证件号码格式有误！',
            trigger: 'blur'
          }
       ],
input 输入框规则  
export function NummeterVerification(num) {
  // // 第一位不能为0
  // this.types.num = this.types.num.replace(/^[0]+[0-9]*$/gi, '')
  // 先把非数字的都替换掉，除了数字和.
  num = num.replace(/[^\d.]/g, '')
  // 保证只有不出现.
  num = num.replace(/\.{2,}/g, '')
  // 必须保证第一个为数字而不是.
  num = num.replace(/^\./g, '')
  // 保证.只不出现，而不能出现两次以上
  num = num.replace('.', '$#$').replace(/\./g, '').replace('$#$', '')
  // 只能输入不出现小数
  num = num.replace(/^(\-)*(\d+)\.().*$/, '$1$2.$3')
  // 以上已经过滤，此处控制的是如果没有小数点，首位不能为类似于 01、02的金额
  if (num.indexOf('.') < 0 && num !== '') {
    num = Number(num)
  }
  return num
}
