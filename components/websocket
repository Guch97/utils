PC websocket 连接


mounted() {
    if ('WebSocket' in window) {
      this.initWebSocket()
    } else {
      alert('当前浏览器不支持websocket,无法接收告警推送! ')
    }
},

initWebSocket() {
    const wsUrl = this.SocketwebUrl
    if (this.websocket == null) {
      this.websocket = new WebSocket(wsUrl)
    }
    // 连接错误
    this.websocket.onerror = this.setErrorMessage
    // //连接成功
    this.websocket.onopen = this.setOnopenMessage
    // 收到消息的回调
    this.websocket.onmessage = this.setOnmessageMessage
    // 连接关闭的回调
    this.websocket.onclose = this.setOncloseMessage
    // 监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。
    window.onbeforeunload = this.onbeforeunload
},
// 重新连接
reconnect() { 
      var that = this
      if (that.lockReconnect) {
        return
      }
      that.lockReconnect = true
      // 没连接上会一直重连，设置延迟避免请求过多
      console.log('断开重新连接...')
      that.timeoutnum && clearTimeout(that.timeoutnum)
      that.timeoutnum = setTimeout(function() {
        // 新连接
        that.initWebSocket()
        that.lockReconnect = false
      }, 10000)
  },
reset() { // 重置心跳
      var that = this
      // 清除时间
      clearTimeout(that.timeoutObj)
      clearTimeout(that.serverTimeoutObj)
      // 重启心跳
      that.start()
    },
start() { // 开启心跳
      var that = this
      that.timeoutObj && clearTimeout(that.timeoutObj)
      that.serverTimeoutObj && clearTimeout(that.serverTimeoutObj)
      that.timeoutObj = setTimeout(function() {
        // 这里发送一个心跳，后端收到后，返回一个心跳消息，
        if (that.websocket.readyState === 1) { // 如果连接正常
          console.log('如果连接正常')
          // that.websocket.send(JSON.parse(that.info)) // 发送信息
        } else { // 否则重连
          that.reconnect()
        }
        that.serverTimeoutObj = setTimeout(function() {
          // 超时关闭
          that.websocket.close()
        }, that.timeout)
      }, that.timeout)
  },

setErrorMessage() {
      console.log('WebSocket连接发生错误' + '   状态码：' + this.websocket.readyState)
      this.reconnect() // 重连websocket
},
setOnopenMessage() {
      console.log('WebSocket连接成功' + '   状态码：' + this.websocket.readyState)
      // this.start() // 开启心跳
      // this.websocket.send('heart') // 发送信息
},
setOnmessageMessage(event) {
      // this.reset() // 收到服务器消息,心跳重置
      const res = JSON.parse(event.data)
      console.log('服务端返回：' + event.data, 'res', res)
      if (res.inform && res.inform === 'call') {
        if (res.status === '3' || res.status === '4') {
          this.callid = res.callid
          console.log(this.callid, 'this.callid')
        }
      }
},
setOncloseMessage() {
      console.log('WebSocket连接关闭' + '   状态码：' + this.websocket.readyState)
      // console.log(this.$route);
      if (this.$route.meta.noWebsocket) { // 登录页面不需要重连
        clearTimeout(this.timeoutObj)
        clearTimeout(this.serverTimeoutObj)
        clearTimeout(this.timeoutnum)
        this.timeoutObj = null
        this.serverTimeoutObj = null
        this.timeoutnum = null
      } else {
        this.reconnect() // 重连websocket
      }
},
// 监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。
    window.onbeforeunload = this.onbeforeunload

